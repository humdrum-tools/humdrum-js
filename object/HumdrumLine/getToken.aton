---
---
@@BEGIN:	FunctionDocumentation
@INDEXED:	yes
@CLASSNAME:	HumdrumLine
@METHOD:	getToken
@ACCESS:	public
@PARAMETERS:	index
@PARAMETERS:	index-1, index-2, ...
@PARAMETERS:	index-array
@RETURN:	case 1: <span class="obj">HumdrumToken</span> or null
@RETURN:	cases 2 and 3: (nested) array of <span class="obj s">HumdrumToken</span> or nulls
@FILE:		components/HumdrumLine.js
@ALIAS:		
@LINES:		
@SEEALSO:	
@SHORTDESC:	Return the token at a given index position.
@LONGDESC:	

The <span class="func">getToken</span> function will return a <span
class="obj">HumdrumToken</span> according to the reqested index location
in the <span class="var">fields</span> array.  If the requested slot is
empty, invalid, or undefined, then null will be returned instead.

Multiple index values can be given as arguments to <span
class="func">getToken</span>, in which case an array of <span class="obj
s">HumdrumToken</span> (or nulls) will be returned.  Nested arrays of
indexes can also be given in the arguments, such as <span
style="background-color:#ddd; padding:3px;">[1, [2, [3, 1, 3]], 0, 4]</span>, in which case
a parallel array structure of <span class="obj s">HumdrumToken</span>
will be returned&mdash;the output array potentially nested as for this example,


@@BEGIN: EXAMPLE
@TITLE: Extracting a single token field from a line.
@DESCRIPTION:
	This example loads a Bach chorale, then extracts line index 56
	from the data, and then pulls out the third token on the line
	(at field index 2), which happens to be an eighth-note F&sharp;
	at the end of a beam group.
@CODE:
var h = new Humdrum;
h.onload = function (x) {
	console.log(x.getLine(56).getToken(2).getText());
};
h.parse("h://chor/chor001.krn");
@OUTPUT:
"8f#J"
@POSTDESC:
	Try copy-and-pasting the above example code into the javascript
	console of your web-browser.  The result should be the text
	shown in the output section under the code. This example uses the
	HumdrumBase.onload callback since the data is loaded from a URL.
	Therefore, the javascript interpreter must wait until the data
	is loaded before it can continue processing the Humdrum object.

	<p>
	After the data has been downloaded from the web, the function
	stored in HumdrumBase.onload will be run.  Notice that the
	onload function uses "x" as the object name rather than "h".
	This is because the Humdrum object that downloaded the data
	will be given as an argument to the function stored in the <span
	class="var">onload</span> property of the Humdrum object.  In this
	case, you could also use "h" as well.
@@END:	EXAMPLE

@@BEGIN: EXAMPLE
@TITLE: Extracting multiple tokens
@DESCRIPTION:
	This example loads the same Bach chorale, then
	extracts the bass, alto, and an invalid <span
	class="obj">HumdrumToken</span> from line index 32.
	Next, this array is mapped to the <span class="objlink"
	data="HumdrumToken/getText">HumdrumToken.getText</span>
	function to generate an array of the text strings for each
	token. Since the last token index, 4, is larger than the
	maximum field index of 3 on the line, the last extracted <span
	class="obj">HumdrumToken</span> in the returned array is instead
	a null.
@CODE:
var h = new Humdrum("h://chor/chor001.krn");
h.getLine(32).getToken(0, 2, 4)
             .map(function(x) { return x ? x.getText() : null });
@OUTPUT:
	["4C", "8eL", null]
@@END:	EXAMPLE

@SRCCODE:
{% include humdrum-js/HumdrumLine-getToken.js -%}

@@END:	FunctionDocumentation


